diff --git a/kernel/conftest.sh b/kernel/conftest.sh
index 86b3b49..28d186e 100755
--- a/kernel/conftest.sh
+++ b/kernel/conftest.sh
@@ -903,11 +903,13 @@ compile_test() {
             CODE="
             #include <linux/pci.h>
             #include <linux/mdev.h>
-            void conftest_mdev_get_type_group_id() {
-                mdev_get_type_group_id();
+            int conftest_mdev_get_type_group_id(void) {
+                return offsetof(struct mdev_driver, show_description);
             }"
+            # the check does not make sense but we need to use the newer ifdef branch
+            # for further changes
 
-            compile_check_conftest "$CODE" "NV_MDEV_GET_TYPE_GROUP_ID_PRESENT" "" "functions"
+            compile_check_conftest "$CODE" "NV_MDEV_GET_TYPE_GROUP_ID_PRESENT" "" "types"
         ;;
 
         vfio_device_mig_state)
@@ -1054,8 +1056,10 @@ compile_test() {
             #include <linux/pci.h>
             #include <linux/mdev.h>
             int conftest_mdev_driver_has_supported_type_groups(void) {
-                return offsetof(struct mdev_driver, supported_type_groups);
+                return offsetof(struct mdev_driver, show_description);
             }"
+            # the check does not make sense but we need to use the newer ifdef branch
+            # for further changes
 
             compile_check_conftest "$CODE" "NV_MDEV_DRIVER_HAS_SUPPORTED_TYPE_GROUPS" "" "types"
         ;;
diff --git a/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.c b/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.c
index 8fecad0..de9fbe2 100644
--- a/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.c
+++ b/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.c
@@ -40,6 +40,7 @@ struct phys_devs phys_devices;
 #define VGPU_EXIT_TIMEOUT_MILLISECONDS 5000
 #define WAITQUEUE_TIMEOUT_MILLISECONDS 25000
 #define VGPU_TYPE_NAME_SIZE 8
+#define VGPU_TYPE_PRETTYNAME_SIZE 32
 
 #if defined(NV_VGPU_KVM_BUILD)
 static void vgpu_msix_disable(vgpu_dev_t *vgpu_dev);
@@ -401,7 +401,7 @@ void nv_vgpu_vfio_dma_unmap_callback(struct vgpu_dev_s *vgpu_dev, u64 iova, u64
             if (vgpu_dev->mapping_cache && vgpu_dev->mapping_cache[gpfn])
             {
 #if defined(NV_VFIO_PIN_PAGES_HAS_VFIO_DEVICE_ARG)
-                vfio_unpin_pages(vgpu_dev->vdev, gpfn << PAGE_SHIFT, 1);
+                vfio_unpin_pages(&vgpu_dev->vdev, gpfn << PAGE_SHIFT, 1);
                 ret = 1;
 #else
                 ret = vfio_unpin_pages(vgpu_dev->dev,
@@ -435,6 +436,16 @@ NV_STATUS nv_get_vgpu_type_id(struct kobject *kobj, struct device *dev,
                                      NvU32 *vgpu_type_id, void *mtype)
 {
 #if defined(NV_MDEV_GET_TYPE_GROUP_ID_PRESENT)
+    unsigned id;
+
+    if (mtype == NULL)
+        return NV_ERR_INVALID_ARGUMENT;
+    if (kstrtouint(((struct mdev_type *)mtype)->sysfs_name, 10, &id) != 0)
+        return NV_ERR_INVALID_ARGUMENT;
+    *vgpu_type_id = id;
+    return NV_OK;
+
+#if 0
     struct pci_dev *pdev = to_pci_dev(dev);
     phys_dev_t *phys_dev = NULL;
 
@@ -459,6 +470,7 @@ NV_STATUS nv_get_vgpu_type_id(struct kobject *kobj, struct device *dev,
 
     *vgpu_type_id = phys_dev->vgpu_type_ids[mtype_get_type_group_id(mtype)];
     up(&phys_dev->ops_lock);
+#endif
 
 #else
     char *strp = NULL;
@@ -478,49 +490,10 @@ NV_STATUS nv_get_vgpu_type_id(struct kobject *kobj, struct device *dev,
     return NV_OK;
 }
 
-#if defined(NV_MDEV_GET_TYPE_GROUP_ID_PRESENT)
-static ssize_t name_show(struct mdev_type *mtype,
-                         struct mdev_type_attribute *attr, char *buf)
+ssize_t nv_vgpu_vfio_description_show(struct mdev_type *mtype, char *buf)
 {
-    struct device *dev = mtype_get_parent_dev(mtype);
+    struct device *dev = mtype->parent->dev;
     struct kobject *kobj = NULL;
-#else
-static ssize_t name_show(struct kobject *kobj, struct device *dev, char *buf)
-{
-    void *mtype = NULL;
-#endif
-    struct pci_dev *pdev = to_pci_dev(dev);
-    struct pci_dev *parent_device;
-    NvU32 vgpu_type_id;
-    NV_STATUS status;
-    if (pdev->is_virtfn)
-        parent_device = pdev->physfn;
-    else
-        parent_device = pdev;
-
-    status = nv_get_vgpu_type_id(kobj, dev, &vgpu_type_id, mtype);
-    if (status != NV_OK)
-        return -EINVAL;
-
-    status = rm_vgpu_vfio_ops.get_name(parent_device, vgpu_type_id, buf);
-    if (status != NV_OK)
-        return -EIO;
-
-    return strlen(buf);
-}
-MDEV_TYPE_ATTR_RO(name);
-
-#if defined(NV_MDEV_GET_TYPE_GROUP_ID_PRESENT)
-static ssize_t description_show(struct mdev_type *mtype,
-                         struct mdev_type_attribute *attr, char *buf)
-{
-    struct device *dev = mtype_get_parent_dev(mtype);
-    struct kobject *kobj = NULL;
-#else
-static ssize_t description_show(struct kobject *kobj, struct device *dev, char *buf)
-{
-    void *mtype = NULL;
-#endif
     struct pci_dev *pdev = to_pci_dev(dev);
     struct pci_dev *parent_device;
     NvU32 vgpu_type_id;
@@ -540,19 +513,13 @@ static ssize_t description_show(struct kobject *kobj, struct device *dev, char *
 
     return strlen(buf);
 }
-MDEV_TYPE_ATTR_RO(description);
 
-#if defined(NV_MDEV_GET_TYPE_GROUP_ID_PRESENT)
-static ssize_t available_instances_show(struct mdev_type *mtype,
-                         struct mdev_type_attribute *attr, char *buf)
+unsigned nv_vgpu_vfio_get_available(struct mdev_type *mtype)
 {
-    struct device *dev = mtype_get_parent_dev(mtype);
+    int num;
+    char buf[256];
+    struct device *dev = mtype->parent->dev;
     struct kobject *kobj = NULL;
-#else
-static ssize_t available_instances_show(struct kobject *kobj, struct device *dev, char *buf)
-{
-    void *mtype = NULL;
-#endif
     struct pci_dev *pdev = to_pci_dev(dev);
     NvU32 vgpu_type_id;
     NV_STATUS status;
@@ -564,31 +531,25 @@ static ssize_t available_instances_show(struct kobject *kobj, struct device *dev
     status = rm_vgpu_vfio_ops.get_instances(pdev, vgpu_type_id, buf);
     if (status != NV_OK)
         return -EIO;
+    if (kstrtouint(buf, 0, &num) != 0)
+        return -EIO;
 
-    return strlen(buf);
-}
-MDEV_TYPE_ATTR_RO(available_instances);
-
-#if defined(NV_MDEV_GET_TYPE_GROUP_ID_PRESENT)
-static ssize_t device_api_show(struct mdev_type *mtype,
-                         struct mdev_type_attribute *attr, char *buf)
-#else
-static ssize_t device_api_show(struct kobject *kobj, struct device *dev,
-                               char *buf)
-#endif
-{
-    return sprintf(buf, "%s\n",
-                   VFIO_DEVICE_API_PCI_STRING);
+    // this is a nasty hack, we should not do this here!
+    if (mtype->pretty_name == NULL) {
+        char *vgpu_type_prettyname = NULL;
+        NV_KMALLOC(vgpu_type_prettyname, VGPU_TYPE_PRETTYNAME_SIZE);
+        if (vgpu_type_prettyname != NULL) {
+            status = rm_vgpu_vfio_ops.get_name(pdev, vgpu_type_id, vgpu_type_prettyname);
+            if (status == NV_OK)
+                mtype->pretty_name = vgpu_type_prettyname;
+            else {
+                NV_KFREE(vgpu_type_prettyname, VGPU_TYPE_PRETTYNAME_SIZE);
+                printk(KERN_WARNING "nvidia: rm_vgpu_vfio_ops.get_name failed, status=0x%02x\n", status);
+            }
+        }
+    }
+    return num;
 }
-MDEV_TYPE_ATTR_RO(device_api);
-
-static struct attribute *vgpu_type_attrs[] = {
-    &mdev_type_attr_name.attr,
-    &mdev_type_attr_description.attr,
-    &mdev_type_attr_available_instances.attr,
-    &mdev_type_attr_device_api.attr,
-    NULL,
-};
 
 static NvBool nv_wait_for_vgpu_task_exit(vgpu_dev_t *vgpu_dev)
 {
@@ -2349,7 +2349,7 @@ static void nv_vgpu_clear_mapping_cache(vgpu_dev_t *vgpu_dev)
                 for (k = j + 1; k < pfn_count; k++)
                     if (gpfn_buffer[k - 1] + 1 != gpfn_buffer[k])
                         break;
-                vfio_unpin_pages(vgpu_dev->vdev, gpfn_buffer[j] << PAGE_SHIFT, k - j);
+                vfio_unpin_pages(&vgpu_dev->vdev, gpfn_buffer[j] << PAGE_SHIFT, k - j);
                 j = k;
             }
             ret = pfn_count;
@@ -3260,7 +3260,7 @@ NV_STATUS nv_vgpu_unpin_pages(NvU64 *buffer, NvU32 pfn_count,
                 for (k = j + 1; k < count; k++)
                     if (gpfn_buffer[k - 1] + 1 != gpfn_buffer[k])
                         break;
-                vfio_unpin_pages(vgpu_dev->vdev, gpfn_buffer[j] << PAGE_SHIFT, k - j);
+                vfio_unpin_pages(&vgpu_dev->vdev, gpfn_buffer[j] << PAGE_SHIFT, k - j);
                 j = k;
             }
             ret = count;
@@ -3419,7 +3419,7 @@ NV_STATUS nv_vgpu_translate_gfn_to_pfn(NvU64 *gpfn_buffer, NvU64 *hpfn_buffer,
                 for (k = j + 1; k < cnt; k++)
                     if (tgpfn_buffer[pinned_count + k - 1] + 1 != tgpfn_buffer[pinned_count + k])
                         break;
-                vfio_pin_pages(vgpu_dev->vdev, tgpfn_buffer[pinned_count + j] << PAGE_SHIFT,
+                vfio_pin_pages(&vgpu_dev->vdev, tgpfn_buffer[pinned_count + j] << PAGE_SHIFT,
                                k - j, IOMMU_READ | IOMMU_WRITE, pa_page + j);
                 j = k;
             }
@@ -3517,7 +3517,7 @@ pin_err:
                 for (k = j + 1; k < cnt; k++)
                     if (tgpfn_buffer[k - 1] + 1 != tgpfn_buffer[k])
                         break;
-                vfio_unpin_pages(vgpu_dev->vdev, tgpfn_buffer[j] << PAGE_SHIFT, k - j);
+                vfio_unpin_pages(&vgpu_dev->vdev, tgpfn_buffer[j] << PAGE_SHIFT, k - j);
                 j = k;
             }
             ret = cnt;
@@ -4788,27 +4749,29 @@ flr_done:
 
 #endif /* NV_VGPU_KVM_BUILD */
 
-static void delete_type_groups(phys_dev_t *phys_dev)
+static void delete_mdev_types(phys_dev_t *phys_dev)
 {
-    struct attribute_group *vgpu_type_group;
+    struct mdev_type *mdev_type;
     int i;
 
-    if (phys_dev->vgpu_type_groups == NULL)
+    if (phys_dev->mdev_types == NULL)
         return ;
 
     for (i = 0; i < phys_dev->num_vgpu_types; i++)
     {
-        vgpu_type_group = phys_dev->vgpu_type_groups[i];
-        if (vgpu_type_group == NULL)
+        mdev_type = phys_dev->mdev_types[i];
+        if (mdev_type == NULL)
             break;
 
-        if (vgpu_type_group->name)
-            NV_KFREE(vgpu_type_group->name, sizeof(NvU32));
+        if (mdev_type->sysfs_name)
+            NV_KFREE(mdev_type->sysfs_name, VGPU_TYPE_NAME_SIZE);
+        if (mdev_type->pretty_name)
+            NV_KFREE(mdev_type->pretty_name, VGPU_TYPE_PRETTYNAME_SIZE);
 
-        NV_KFREE(vgpu_type_group, sizeof(struct attribute_group));
+        NV_KFREE(mdev_type, sizeof(struct mdev_type));
     }
-    NV_KFREE(phys_dev->vgpu_type_groups,
-             sizeof(struct attribute *) * (phys_dev->num_vgpu_types + 1));
+    NV_KFREE(phys_dev->mdev_types,
+        sizeof(struct mdev_type *) * (phys_dev->num_vgpu_types + 1));
 
     if (phys_dev->vgpu_type_ids != NULL)
     {
@@ -4822,7 +4785,7 @@ static NV_STATUS nv_vgpu_probe(struct pci_dev *pdev, NvU32 num_vgpu_types, NvU32
     NV_STATUS status = NV_OK;
 #if defined(NV_VGPU_KVM_BUILD)
     NvU32 i;
-    struct  attribute_group *vgpu_type_group = NULL;
+    struct mdev_type *mdev_type = NULL;
     char *vgpu_type_name = NULL;
     phys_dev_t *phys_dev = NULL;
 
@@ -4867,8 +4830,8 @@ static NV_STATUS nv_vgpu_probe(struct pci_dev *pdev, NvU32 num_vgpu_types, NvU32
     memset(phys_dev, 0, sizeof(phys_dev_t));
 
     phys_dev->num_vgpu_types = num_vgpu_types;
-    NV_KMALLOC(phys_dev->vgpu_type_groups, sizeof(struct attribute *) * (num_vgpu_types + 1));
-    if (phys_dev->vgpu_type_groups == NULL)
+    NV_KMALLOC(phys_dev->mdev_types, sizeof(struct mdev_type *) * (num_vgpu_types + 1));
+    if (phys_dev->mdev_types == NULL)
     {
         status = NV_ERR_NO_MEMORY;
         goto probe_fail;
@@ -4884,22 +4847,30 @@ static NV_STATUS nv_vgpu_probe(struct pci_dev *pdev, NvU32 num_vgpu_types, NvU32
 
     for (i = 0; i < phys_dev->num_vgpu_types; i++)
     {
-        NV_KMALLOC(vgpu_type_group, sizeof(struct attribute_group));
+        NV_KMALLOC(mdev_type, sizeof(struct mdev_type));
         NV_KMALLOC(vgpu_type_name, VGPU_TYPE_NAME_SIZE);
 
-        if (vgpu_type_name == NULL || vgpu_type_group == NULL)
+        if (vgpu_type_name == NULL || mdev_type == NULL)
         {
             status = NV_ERR_NO_MEMORY;
             goto probe_fail;
         }
-        memset(vgpu_type_group, 0, sizeof(struct attribute_group));
+        memset(mdev_type, 0, sizeof(struct mdev_type));
 
         snprintf(vgpu_type_name, VGPU_TYPE_NAME_SIZE,"%d",vgpu_type_ids[i]);
-        vgpu_type_group->name = vgpu_type_name;
-        vgpu_type_group->attrs = vgpu_type_attrs;
-        phys_dev->vgpu_type_groups[i] = vgpu_type_group;
+        mdev_type->sysfs_name = vgpu_type_name;
+        phys_dev->mdev_types[i] = mdev_type;
     }
-    phys_dev->vgpu_type_groups[i] = NULL;
+    phys_dev->mdev_types[i] = NULL;
+
+    INIT_LIST_HEAD(&phys_dev->next);
+    NV_INIT_MUTEX(&phys_dev->ops_lock);
+    phys_dev->dev = pdev;
+    phys_dev->is_virtfn = pdev->is_virtfn;
+    
+    down(&phys_devices.phys_dev_list_lock);
+    list_add(&phys_dev->next, &phys_devices.phys_dev_list);
+    up(&phys_devices.phys_dev_list_lock);
 
 #if defined(NV_USE_VFIO_PCI_CORE)
     if (!pdev->is_virtfn)
@@ -4909,28 +4880,21 @@ static NV_STATUS nv_vgpu_probe(struct pci_dev *pdev, NvU32 num_vgpu_types, NvU32
         if (status != NV_OK)
             goto probe_fail;
 
-        if (mdev_register_device(&pdev->dev, phys_dev->vgpu_fops) != 0)
+        if (mdev_register_parent(&phys_dev->parent, &pdev->dev, phys_dev->vgpu_fops,
+                         phys_dev->mdev_types, phys_dev->num_vgpu_types) != 0)
             goto probe_fail;
     }
 
-    phys_dev->dev = pdev;
-    phys_dev->is_virtfn = pdev->is_virtfn;
     status = nv_vfio_pci_core_init(phys_dev);
     if (status != NV_OK)
         goto probe_fail1;
-    INIT_LIST_HEAD(&phys_dev->next);
-    NV_INIT_MUTEX(&phys_dev->ops_lock);
-
-    down(&phys_devices.phys_dev_list_lock);
-    list_add(&phys_dev->next, &phys_devices.phys_dev_list);
-    up(&phys_devices.phys_dev_list_lock);
 
     return status;
 
 probe_fail1:
-    mdev_unregister_device(&pdev->dev);
+    mdev_unregister_parent(&phys_dev->parent);
 probe_fail:
-    delete_type_groups(phys_dev);
+    delete_mdev_types(phys_dev);
     if (pdev->is_virtfn) {
         pci_disable_device(pdev);
     }
@@ -4962,7 +4926,7 @@ static void nv_vgpu_remove(struct pci_dev *dev)
     {
         if (phys_dev->dev == dev)
         {
-            mdev_unregister_device(&dev->dev);
+            mdev_unregister_parent(&phys_dev->parent);
             if (dev->is_virtfn)
             {
                 pci_disable_device(dev);
@@ -4978,7 +4942,7 @@ static void nv_vgpu_remove(struct pci_dev *dev)
         down(&phys_dev->ops_lock);
         if (phys_dev->dev == dev)
         {
-            delete_type_groups(phys_dev);
+            delete_mdev_types(phys_dev);
             list_del(&phys_dev->next);
             up(&phys_dev->ops_lock);
             nv_vgpu_free_mdev_fops(phys_dev);
@@ -5076,7 +5040,7 @@ static void __exit nv_vgpu_vfio_exit(void)
 
     list_for_each_entry_safe(phys_dev, tmpdev, &phys_devices.phys_dev_list, next)
     {
-        mdev_unregister_device(&phys_dev->dev->dev);
+        mdev_unregister_parent(&phys_dev->parent);
         if (phys_dev->dev->is_virtfn)
         {
             pci_disable_device(phys_dev->dev);
@@ -5088,7 +5052,7 @@ static void __exit nv_vgpu_vfio_exit(void)
     list_for_each_entry_safe(phys_dev, tmpdev, &phys_devices.phys_dev_list, next)
     {
         down(&phys_dev->ops_lock);
-        delete_type_groups(phys_dev);
+        delete_mdev_types(phys_dev);
         list_del(&phys_dev->next);
         up(&phys_dev->ops_lock);
         nv_vgpu_free_mdev_fops(phys_dev);
diff --git a/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.h b/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.h
index e9520cb..4fa7c51 100644
--- a/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.h
+++ b/kernel/nvidia-vgpu-vfio/nvidia-vgpu-vfio.h
@@ -81,6 +81,8 @@ NV_STATUS nv_vfio_vgpu_vf_reg_access_from_plugin(struct pci_dev *pdev, VGPU_EMUL
                                                  NvU64 offset, NvU32 width, NvU8* data, NvBool isWrite);
 NV_STATUS  nv_vgpu_set_mdev_fops(struct phys_dev_s *);
 void       nv_vgpu_free_mdev_fops(struct phys_dev_s *);
+ssize_t    nv_vgpu_vfio_description_show(struct mdev_type *mtype, char *buf);
+unsigned   nv_vgpu_vfio_get_available(struct mdev_type *mtype);
 
 #if defined(NV_VFIO_DEVICE_MIG_STATE_PRESENT)
 struct file *nv_vgpu_set_device_state(struct vfio_device *core_vdev, struct vgpu_dev_s *vgpu_dev,
@@ -143,7 +145,7 @@ do                                                      \
 #if defined(NV_MDEV_PARENT_DEV_PRESENT)
 #define NV_GET_MDEV_PARENT(mdev) mdev_parent_dev(mdev)
 #else
-#define NV_GET_MDEV_PARENT(mdev) (mdev)->parent->dev
+#define NV_GET_MDEV_PARENT(mdev) (mdev)->type->parent->dev
 #endif
 
 #if defined(NV_MDEV_FROM_DEV_PRESENT)
@@ -356,6 +358,9 @@ typedef struct
 
 typedef struct vgpu_dev_s
 {
+#if defined(NV_MDEV_PARENT_OPS_HAS_DEVICE_DRIVER) || defined(NV_MDEV_DRIVER_HAS_SUPPORTED_TYPE_GROUPS)
+    struct vfio_device vdev;
+#endif
     struct list_head next;
     struct mdev_phys_mapping phys_mappings;
     struct rb_root gpfn_list;
@@ -384,9 +389,6 @@ typedef struct vgpu_dev_s
     NvU64 *offsets;
     NvU64 *sizes;
     mapping_node_t **mapping_cache;
-#if defined(NV_MDEV_PARENT_OPS_HAS_DEVICE_DRIVER) || defined(NV_MDEV_DRIVER_HAS_SUPPORTED_TYPE_GROUPS)
-    struct vfio_device *vdev;
-#endif
     NvU64 vfio_max_gpfn;
     NvU64 dummy_phys_addr;
     NvU64 dummy_virt_addr;
@@ -415,7 +417,7 @@ typedef struct phys_dev_s
     struct vfio_pci_core_device vpcdev;
     vgpu_dev_t              *vgpu_dev;
 #endif
-    struct attribute_group **vgpu_type_groups;
+    struct mdev_type       **mdev_types;
     int                      num_vgpu_types;
     NvU32                   *vgpu_type_ids;
     struct semaphore         ops_lock;
@@ -427,6 +429,7 @@ typedef struct phys_dev_s
 #else
     struct parent_ops       *vgpu_fops;
 #endif
+    struct mdev_parent parent;
 } phys_dev_t;
 
 #define INVALID_VGPU_INSTANCE_ID 0xFFFFFFFF
@@ -471,7 +474,7 @@ static inline int nv_vfio_register_notifier(vgpu_dev_t *vgpu_dev)
 #if (NV_VFIO_NOTIFIER_ARGUMENT_COUNT == 4)
         unsigned long events = VFIO_IOMMU_NOTIFY_DMA_UNMAP;
 #if defined(NV_VFIO_PIN_PAGES_HAS_VFIO_DEVICE_ARG)
-        ret = vfio_register_notifier(vgpu_dev->vdev,
+        ret = vfio_register_notifier(&vgpu_dev->vdev,
 #else
         ret = vfio_register_notifier(vgpu_dev->dev,
 #endif
@@ -491,7 +494,7 @@ static inline int nv_vfio_unregister_notifier(vgpu_dev_t *vgpu_dev)
 #ifndef NV_VFIO_PIN_PAGES_HAS_VFIO_DEVICE_ARG
 #if (NV_VFIO_NOTIFIER_ARGUMENT_COUNT == 4)
 #if defined(NV_VFIO_PIN_PAGES_HAS_VFIO_DEVICE_ARG)
-    ret = vfio_unregister_notifier(vgpu_dev->vdev, VFIO_IOMMU_NOTIFY, &vgpu_dev->nb);
+    ret = vfio_unregister_notifier(&vgpu_dev->vdev, VFIO_IOMMU_NOTIFY, &vgpu_dev->nb);
 #else
     ret = vfio_unregister_notifier(vgpu_dev->dev, VFIO_IOMMU_NOTIFY, &vgpu_dev->nb);
 #endif
diff --git a/kernel/nvidia-vgpu-vfio/vgpu-vfio-mdev.c b/kernel/nvidia-vgpu-vfio/vgpu-vfio-mdev.c
index c0817ab..06b6624 100644
--- a/kernel/nvidia-vgpu-vfio/vgpu-vfio-mdev.c
+++ b/kernel/nvidia-vgpu-vfio/vgpu-vfio-mdev.c
@@ -71,6 +71,9 @@ int nv_vgpu_vfio_mdev_create(struct kobject *kobj, vgpu_dev_t *vgpu_dev)
     NvU32 vgpu_type_id;
     int ret = 0;
 
+    // vfio_alloc_device() stored pointer to mdev.dev into vdev.dev
+    nv_init_vgpu_dev(vgpu_dev, to_mdev_device(vgpu_dev->vdev.dev));
+
     pdev = to_pci_dev(NV_GET_MDEV_PARENT(vgpu_dev->mdev));
     if (!pdev)
         return -EINVAL;
@@ -117,19 +120,7 @@ int nv_vgpu_vfio_mdev_create(struct kobject *kobj, vgpu_dev_t *vgpu_dev)
 
 static vgpu_dev_t *nv_get_vgpu_from_vdev(struct vfio_device *core_vdev)
 {
-    vgpu_dev_t *vgpu_dev= NULL;
-
-    if (!core_vdev || !core_vdev->dev)
-    {
-        NV_VGPU_LOG(VGPU_ERR, "No vfio device found\n");
-        return NULL;
-    }
-
-    vgpu_dev = dev_get_drvdata(core_vdev->dev);
-    if (!vgpu_dev)
-        return NULL;
-
-    return vgpu_dev;
+    return container_of(core_vdev, vgpu_dev_t, vdev);
 }
 
 static int nv_vfio_mdev_open(struct vfio_device *core_vdev)
@@ -226,6 +217,21 @@ nv_vfio_mdev_set_device_state(struct vfio_device *core_vdev,
 }
 #endif
 
+static int nv_vfio_mdev_init_dev(struct vfio_device *core_vdev)
+{
+    vgpu_dev_t *vgpu_dev = nv_get_vgpu_from_vdev(core_vdev);
+    return nv_vgpu_vfio_mdev_create(vgpu_dev);
+}
+
+static void nv_vfio_mdev_release_dev(struct vfio_device *core_vdev)
+{
+    vgpu_dev_t *vgpu_dev = nv_get_vgpu_from_vdev(core_vdev);
+    int ret = nv_vgpu_vfio_mdev_destroy(vgpu_dev);
+    if (ret)
+        NV_VGPU_DEV_LOG(VGPU_ERR, vgpu_dev, "Failed to destroy vGPU device, ret: %d\n", ret);
+    vfio_free_device(core_vdev);
+}
+
 #if defined(NV_VFIO_MIGRATION_OPS_PRESENT)
 static const struct vfio_migration_ops nv_vfio_mdev_migration_ops = {
     .migration_set_state = nv_vfio_mdev_set_device_state,
@@ -235,6 +241,8 @@ static const struct vfio_migration_ops nv_vfio_mdev_migration_ops = {
 
 static const struct vfio_device_ops nv_vfio_mdev_dev_ops = {
     .name           = "nvidia-vgpu-vfio",
+    .init           = nv_vfio_mdev_init_dev,
+    .release        = nv_vfio_mdev_release_dev,
 #if defined(NV_MDEV_PARENT_OPS_HAS_OPEN_DEVICE) || defined(NV_MDEV_DRIVER_HAS_SUPPORTED_TYPE_GROUPS)
     .open_device    = nv_vfio_mdev_open,
     .close_device   = nv_vfio_mdev_release,
@@ -265,17 +273,12 @@ static int nv_vfio_mdev_probe(struct mdev_device *mdev)
     if (!mdev)
         return -EINVAL;
 
-    ret = nv_alloc_vgpu_dev(&vgpu_dev);
-    if (ret)
-        return ret;
-
-    nv_init_vgpu_dev(vgpu_dev, mdev);
-
-    vdev = kzalloc(sizeof(*vdev), GFP_KERNEL);
-    if (!vdev)
-        return -ENOMEM;
-
-    vfio_init_group_dev(vdev, &mdev->dev, &nv_vfio_mdev_dev_ops);
+    vgpu_dev = vfio_alloc_device(vgpu_dev_s, vdev, &mdev->dev,
+                             &nv_vfio_mdev_dev_ops);
+    if (IS_ERR(vgpu_dev))
+        return PTR_ERR(vgpu_dev);
+    
+    vdev = &vgpu_dev->vdev;
 
 #if defined(NV_VFIO_DEVICE_MIG_STATE_PRESENT)
     vdev->migration_flags = VFIO_MIGRATION_STOP_COPY;
@@ -285,6 +288,8 @@ static int nv_vfio_mdev_probe(struct mdev_device *mdev)
     vdev->mig_ops = &nv_vfio_mdev_migration_ops;
 #endif
 
+    dev_set_drvdata(&mdev->dev, vgpu_dev);
+
 #if defined(NV_VFIO_REGISTER_EMULATED_IOMMU_DEV_PRESENT)
     ret = vfio_register_emulated_iommu_dev(vdev);
 #else
@@ -293,15 +298,6 @@ static int nv_vfio_mdev_probe(struct mdev_device *mdev)
     if (ret)
         goto out_err;
 
-    ret = nv_vgpu_vfio_mdev_create(vgpu_dev);
-    if (ret)
-    {
-        vfio_unregister_group_dev(vdev);
-        goto out_err;
-    }
-
-    dev_set_drvdata(&mdev->dev, vgpu_dev);
-    vgpu_dev->vdev = vdev;
     return 0;
 
 out_err:
@@ -309,14 +305,12 @@ out_err:
 #if defined(NV_VFIO_UNINIT_GROUP_DEV_PRESENT)
     vfio_uninit_group_dev(vdev);
 #endif /* NV_VFIO_UNINIT_GROUP_DEV_PRESENT */
-    kfree(vdev);
-    nv_free_vgpu_dev(vgpu_dev);
+    vfio_put_device(vdev);
     return ret;
 }
 
 static void nv_vfio_mdev_remove(struct mdev_device *mdev)
 {
-    int ret;
     struct vfio_device *vdev = NULL;
     vgpu_dev_t *vgpu_dev = NULL;
 
@@ -326,24 +320,14 @@ static void nv_vfio_mdev_remove(struct mdev_device *mdev)
     vgpu_dev = dev_get_drvdata(&mdev->dev);
     if (!vgpu_dev)
         return;
-
-    ret = nv_vgpu_vfio_mdev_destroy(vgpu_dev);
-    if (ret)
-        NV_VGPU_DEV_LOG(VGPU_ERR, vgpu_dev, "Failed to destroy vGPU device, ret: %d\n", ret);
-
-    vdev = vgpu_dev->vdev;
-    if (!vdev) {
-        NV_VGPU_DEV_LOG(VGPU_ERR, vgpu_dev, "Failed to get device driver data\n");
-        return;
-    }
-
-    dev_set_drvdata(&mdev->dev, NULL);
+    
+    vdev = &vgpu_dev->vdev;
+    
     vfio_unregister_group_dev(vdev);
 #if defined(NV_VFIO_UNINIT_GROUP_DEV_PRESENT)
     vfio_uninit_group_dev(vdev);
 #endif /* NV_VFIO_UNINIT_GROUP_DEV_PRESENT */
-    kfree(vdev);
-    nv_free_vgpu_dev(vgpu_dev);
+    vfio_put_device(vdev);
 }
 
 struct mdev_driver nv_vfio_mdev_driver = {
@@ -355,6 +339,8 @@ struct mdev_driver nv_vfio_mdev_driver = {
     },
     .probe  = nv_vfio_mdev_probe,
     .remove = nv_vfio_mdev_remove,
+    .get_available  = nv_vgpu_vfio_get_available,
+    .show_description = nv_vgpu_vfio_description_show,
 };
 
 NV_STATUS nv_vgpu_set_mdev_fops(struct phys_dev_s *phys_dev)
@@ -392,7 +378,6 @@ NV_STATUS nv_vgpu_set_mdev_fops(struct phys_dev_s *phys_dev)
     phys_dev->vgpu_fops->owner                 = THIS_MODULE;
 #endif
 
-    phys_dev->vgpu_fops->supported_type_groups = phys_dev->vgpu_type_groups;
     return NV_OK;
 }
 
diff --git a/kernel/nvidia-vgpu-vfio/vgpu-vfio-pci-core.c b/kernel/nvidia-vgpu-vfio/vgpu-vfio-pci-core.c
index 008870a..4e3e534 100644
--- a/kernel/nvidia-vgpu-vfio/vgpu-vfio-pci-core.c
+++ b/kernel/nvidia-vgpu-vfio/vgpu-vfio-pci-core.c
@@ -168,8 +168,6 @@ static int nv_vfio_pci_create(struct device *dev, NvU32 vgpu_type_id)
         return -EINVAL;
     }
 
-    vgpu_dev->vdev = &vpcdev->vdev;
-
     nv_set_phys_dev_vgpu_dev(dev, vgpu_dev);
 
     ret = nv_vgpu_vfio_create(vgpu_dev, pdev, vgpu_type_id);
@@ -386,6 +384,15 @@ const struct attribute_group *vf_dev_groups[] = {
     NULL,
 };
 
+static int nv_vfio_pci_init_dev(struct vfio_device *core_vdev)
+{
+    return 0;
+}
+
+static void nv_vfio_pci_release_dev(struct vfio_device *core_vdev)
+{
+}
+
 #if defined(NV_VFIO_MIGRATION_OPS_PRESENT)
 static const struct vfio_migration_ops nv_vfio_pci_migration_ops = {
     .migration_set_state = nv_vfio_pci_set_device_state,
@@ -395,6 +402,8 @@ static const struct vfio_migration_ops nv_vfio_pci_migration_ops = {
 
 static const struct vfio_device_ops nv_vfio_pci_ops = {
     .name           = "nvidia-vfio-pci",
+    .init           = nv_vfio_pci_init_dev,
+    .release        = nv_vfio_pci_release_dev,
     .open_device    = nv_vfio_pci_open_device,
     .close_device   = nv_vfio_pci_close_device,
     .ioctl          = nv_vfio_pci_ioctl,
@@ -418,7 +427,9 @@ NV_STATUS nv_vfio_pci_core_init(phys_dev_t *phys_dev)
     if (phys_dev->dev->is_virtfn) {
         int ret;
 
-        vfio_pci_core_init_device(&phys_dev->vpcdev, phys_dev->dev, &nv_vfio_pci_ops);
+        ret = vfio_init_device(&phys_dev->vpcdev.vdev, &phys_dev->dev->dev, &nv_vfio_pci_ops);
+        if (ret)
+            return NV_ERR_OPERATING_SYSTEM;
 
         /*
          * As per below commit, set vfio_pci_core_device in drvdata
@@ -438,7 +449,7 @@ NV_STATUS nv_vfio_pci_core_init(phys_dev_t *phys_dev)
         ret = vfio_pci_core_register_device(&phys_dev->vpcdev);
         if (ret) {
             NV_VGPU_LOG(VGPU_ERR, "vfio_pci_core_register_device failed err: %d\n", ret);
-            vfio_pci_core_uninit_device(&phys_dev->vpcdev);
+            vfio_put_device(&phys_dev->vpcdev.vdev);
             phys_dev->vpcdev.pdev = NULL;
             return NV_ERR_OPERATING_SYSTEM;
         }
@@ -447,7 +458,7 @@ NV_STATUS nv_vfio_pci_core_init(phys_dev_t *phys_dev)
         if (ret) {
             NV_VGPU_LOG(VGPU_ERR, "Failed to create sysfs for vGPU types %d\n", ret);
             vfio_pci_core_unregister_device(&phys_dev->vpcdev);
-            vfio_pci_core_uninit_device(&phys_dev->vpcdev);
+            vfio_put_device(&phys_dev->vpcdev.vdev);
             phys_dev->vpcdev.pdev = NULL;
             return NV_ERR_OPERATING_SYSTEM;
         }
@@ -459,7 +470,7 @@ void nv_vfio_pci_core_uninit(phys_dev_t *phys_dev)
 {
     vfio_pci_core_unregister_device(&phys_dev->vpcdev);
     dev_set_drvdata(&phys_dev->dev->dev, NULL);
-    vfio_pci_core_uninit_device(&phys_dev->vpcdev);
+    vfio_put_device(&phys_dev->vpcdev.vdev);
     phys_dev->vpcdev.pdev = NULL;
     sysfs_remove_groups(&phys_dev->dev->dev.kobj, vf_dev_groups);
 }
